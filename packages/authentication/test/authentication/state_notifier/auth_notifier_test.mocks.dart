// Mocks generated by Mockito 5.3.2 from annotations
// in app_authentication/test/authentication/state_notifier/auth_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_authentication/common/datas/interfaces/auth_impl.dart'
    as _i6;
import 'package:app_authentication/common/datas/interfaces/user_impl.dart'
    as _i8;
import 'package:app_authentication/common/datas/interfaces/user_provider_impl.dart'
    as _i3;
import 'package:app_authentication/common/domain/models/models.dart' as _i5;
import 'package:app_authentication/common/domain/states/states.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserProvider extends _i1.Mock implements _i3.IUserProvider {
  MockIUserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get firebaseDocPath => (super.noSuchMethod(
        Invocation.getter(#firebaseDocPath),
        returnValue: '',
      ) as String);
  @override
  _i4.Stream<_i5.User> get userChanges => (super.noSuchMethod(
        Invocation.getter(#userChanges),
        returnValue: _i4.Stream<_i5.User>.empty(),
      ) as _i4.Stream<_i5.User>);
  @override
  _i4.Future<void> setup() => (super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteUserData() => (super.noSuchMethod(
        Invocation.method(
          #deleteUserData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i6.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i7.SuccessAuth>> signIn() =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i7.SuccessAuth>>.value(
            _FakeEither_0<_i7.Failure, _i7.SuccessAuth>(
          this,
          Invocation.method(
            #signIn,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i7.SuccessAuth>>);
  @override
  _i4.Future<_i2.Either<_i7.Failure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i2.Unit>>);
  @override
  _i4.Future<bool> isRegistrationComplete() => (super.noSuchMethod(
        Invocation.method(
          #isRegistrationComplete,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i8.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, _i5.User>> createUser(
          {required _i5.User? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {#user: user},
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, _i5.User>>.value(
            _FakeEither_0<_i7.Failure, _i5.User>(
          this,
          Invocation.method(
            #createUser,
            [],
            {#user: user},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, _i5.User>>);
  @override
  String collectionPath(String? document) => (super.noSuchMethod(
        Invocation.method(
          #collectionPath,
          [document],
        ),
        returnValue: '',
      ) as String);
}
